group_by(classification)%>%
mutate(perc=round(n()/nrow(.), 2)) %>%
distinct(classification, perc) %>%
mutate(data = "001") %>%
pivot_wider(
id_cols = data,
names_from = classification,
values_from = perc
) %>%
mutate(Tidyverse = 1)
install.packages("styler")
styler:::style_active_file()
styler:::style_active_file()
styler:::style_selection()
?pivot_wider()
?pivot_wider
??pivot_wider
?anti_join
??anti_join
styler:::style_selection()
"abskncbasafB" %>% gsub("b", "9")
gsub("b", "9", "abasdasbasdBIASD")
a = c("asdasb", "b", "basd")
gsub("b", "_", a)
library(tidycode)
library(matahari)
library(tidyverse)
# read from txt file
projectFile <- readr::read_lines(
"/Users/qihanzhao/Desktop/IndependentStudyMaterial/team1Copy.txt",
progress=show_progress()
)
#read from R file
# the read_rfiles does not understanding anything except R code (so any code)
# annotation will raise an error
df <- read_rfiles("/Users/qihanzhao/Desktop/IndependentStudyMaterial/team-1.R")
df
View(df)
functions<- unnest_calls(df, expr)
functions%>%
unnest_wider(args)
functions%>%
anti_join(get_stopfuncs())%>%
inner_join(get_classifications(include_duplicates=FALSE))
count(func, classification, sort=TRUE)%>%
ungroup()%>%
ggplot(aes(func, n, fill=classification))+
geom_col(show.legend=FALSE)+
facet_wrap(~classification, scales="free_y")+
coord_flip()
functions %>%
anti_join(get_stopfuncs()) %>%
inner_join(get_classifications(include_duplicates = FALSE)) %>%
select(c(func, lexicon, classification)) %>%
filter(lexicon == "crowdsource") %>%
group_by(classification) %>%
mutate(perc = round(n() / nrow(.), 2)) %>%
distinct(classification, perc) %>%
mutate(data = "001") %>%
pivot_wider(
id_cols = data,
names_from = classification,
values_from = perc
) %>%
mutate(Tidyverse = 1) %>%
dplyr::rename_with(" ", "_")
functions %>%
anti_join(get_stopfuncs()) %>%
inner_join(get_classifications(include_duplicates = FALSE)) %>%
select(c(func, lexicon, classification)) %>%
filter(lexicon == "crowdsource") %>%
group_by(classification) %>%
mutate(perc = round(n() / nrow(.), 2)) %>%
distinct(classification, perc) %>%
mutate(data = "001") %>%
pivot_wider(
id_cols = data,
names_from = classification,
values_from = perc
) %>%
mutate(Tidyverse = 1) %>%
dplyr::rename_with(" ", "_", .x)
functions %>%
anti_join(get_stopfuncs()) %>%
inner_join(get_classifications(include_duplicates = FALSE)) %>%
select(c(func, lexicon, classification)) %>%
filter(lexicon == "crowdsource") %>%
group_by(classification) %>%
mutate(perc = round(n() / nrow(.), 2)) %>%
distinct(classification, perc) %>%
mutate(data = "001") %>%
pivot_wider(
id_cols = data,
names_from = classification,
values_from = perc
) %>%
mutate(Tidyverse = 1) %>%
rename_with(" ", "_", .x)
rlang::last_error()
test.df <- functions %>%
anti_join(get_stopfuncs()) %>%
inner_join(get_classifications(include_duplicates = FALSE)) %>%
select(c(func, lexicon, classification)) %>%
filter(lexicon == "crowdsource") %>%
group_by(classification) %>%
mutate(perc = round(n() / nrow(.), 2)) %>%
distinct(classification, perc) %>%
mutate(data = "001") %>%
pivot_wider(
id_cols = data,
names_from = classification,
values_from = perc
) %>%
mutate(Tidyverse = 1) %>%
rename_with(" ", "_", .x)
test.df <- functions %>%
anti_join(get_stopfuncs()) %>%
inner_join(get_classifications(include_duplicates = FALSE)) %>%
select(c(func, lexicon, classification)) %>%
filter(lexicon == "crowdsource") %>%
group_by(classification) %>%
mutate(perc = round(n() / nrow(.), 2)) %>%
distinct(classification, perc) %>%
mutate(data = "001") %>%
pivot_wider(
id_cols = data,
names_from = classification,
values_from = perc
) %>%
mutate(Tidyverse = 1)
names(test.df) <- gsub(" ", "_", test.df)
test.df
test.df <- functions %>%
anti_join(get_stopfuncs()) %>%
inner_join(get_classifications(include_duplicates = FALSE)) %>%
select(c(func, lexicon, classification)) %>%
filter(lexicon == "crowdsource") %>%
group_by(classification) %>%
mutate(perc = round(n() / nrow(.), 2)) %>%
distinct(classification, perc) %>%
mutate(data = "001") %>%
pivot_wider(
id_cols = data,
names_from = classification,
values_from = perc
) %>%
mutate(Tidyverse = 1)
names(test.df) <- gsub(" ", "_", names(test.df))
test.df
styler:::style_selection()
install.packages("fs")
install.packages("fs")
dir_ls()
fs::dis_ls()
fs::dir_ls()
library(tidycode)
library(matahari)
library(tidyverse)
# read from txt file
projectFile <- readr::read_lines(
"/Users/qihanzhao/Desktop/IndependentStudyMaterial/team1Copy.txt",
progress=show_progress()
)
#read from R file
# the read_rfiles does not understanding anything except R code (so any code)
# annotation will raise an error
df <- read_rfiles("./Data/team-1.R")
df
View(df)
functions<- unnest_calls(df, expr)
functions%>%
unnest_wider(args)
functions%>%
anti_join(get_stopfuncs())%>%
inner_join(get_classifications(include_duplicates=FALSE))
count(func, classification, sort=TRUE)%>%
ungroup()%>%
ggplot(aes(func, n, fill=classification))+
geom_col(show.legend=FALSE)+
facet_wrap(~classification, scales="free_y")+
coord_flip()
count(func, classification, sort=TRUE)%>%
ungroup()%>%
ggplot(aes(func, n, fill=classification))+
geom_col(show.legend=FALSE)+
facet_wrap(~classification, scales="free_y")+
coord_flip()
functions%>%
anti_join(get_stopfuncs())%>%
inner_join(get_classifications(include_duplicates=FALSE))%>%
count(func, classification, sort=TRUE)%>%
ungroup()%>%
ggplot(aes(func, n, fill=classification))+
geom_col(show.legend=FALSE)+
facet_wrap(~classification, scales="free_y")+
coord_flip()
fs::dir_ls()
c = fs::dir_ls()
c
len(c)
length(c)
is.list(c)
is.vector(c)
class(c)
typeof(c)
list.files(
path = "./Data",
pattern = "*.R"
)
# create wide data frame, each dataset is a row, followed by percentage of each
# classification tag.
create_tidy_row <- function(df) {
tidy.row <- df %>%
dplyr::anti_join(tidycode::get_stopfuncs()) %>%
dplyr::inner_join(tidycode::get_classifications(include_duplicates = FALSE)) %>%
dplyr::select(c(func, lexicon, classification)) %>%
dplyr::filter(lexicon == "crowdsource") %>%
dplyr::mutate(percentage = round(n() / nrow(.), 2)) %>%
dplyr::distinct(classification, perc) %>%
dplyr::mutate(date = "001") %>%
tidyr::pivot_wider(
id_cols = data,
names_from = classification,
values_from = percentage
) %>%
janitor::clean_names()
tidy.row
}
functions
View(functions)
df <- create_tidy_row(functions)
install.pckages("janitor")
install.packages("janitor")
# create wide data frame, each dataset is a row, followed by percentage of each
# classification tag.
create_tidy_row <- function(df) {
tidy.row <- df %>%
dplyr::anti_join(tidycode::get_stopfuncs()) %>%
dplyr::inner_join(tidycode::get_classifications(include_duplicates = FALSE)) %>%
dplyr::select(c(func, lexicon, classification)) %>%
dplyr::filter(lexicon == "crowdsource") %>%
dplyr::mutate(percentage = round(n() / nrow(.), 2)) %>%
dplyr::distinct(classification, perc) %>%
dplyr::mutate(date = "001") %>%
tidyr::pivot_wider(
id_cols = data,
names_from = classification,
values_from = percentage
) %>%
janitor::clean_names()
tidy.row
}
df <- create_tidy_row(functions)
tidy.row <- df %>%
dplyr::anti_join(tidycode::get_stopfuncs()) %>%
dplyr::inner_join(tidycode::get_classifications(include_duplicates = FALSE)) %>%
dplyr::select(c(func, lexicon, classification)) %>%
dplyr::filter(lexicon == "crowdsource") %>%
dplyr::mutate(percentage = round(n() / nrow(.), 2)) %>%
dplyr::distinct(classification, percentage) %>%
dplyr::mutate(date = "001") %>%
tidyr::pivot_wider(
id_cols = data,
names_from = classification,
values_from = percentage
) %>%
janitor::clean_names()
# create wide data frame, each dataset is a row, followed by percentage of each
# classification tag.
create_tidy_row <- function(df) {
tidy.row <- df %>%
dplyr::anti_join(tidycode::get_stopfuncs()) %>%
dplyr::inner_join(tidycode::get_classifications(include_duplicates = FALSE)) %>%
dplyr::select(c(func, lexicon, classification)) %>%
dplyr::filter(lexicon == "crowdsource") %>%
dplyr::mutate(percentage = round(n() / nrow(.), 2)) %>%
dplyr::distinct(classification, percentage) %>%
dplyr::mutate(date = "001") %>%
tidyr::pivot_wider(
id_cols = data,
names_from = classification,
values_from = percentage
) %>%
janitor::clean_names()
tidy.row
}
df <- create_tidy_row(functions)
rlang::last_errors()
rlang::last_error()
rlang::last_trace()
tidy.row <- df %>%
dplyr::anti_join(tidycode::get_stopfuncs()) %>%
dplyr::inner_join(tidycode::get_classifications(include_duplicates = FALSE)) %>%
dplyr::select(c(func, lexicon, classification)) %>%
dplyr::filter(lexicon == "crowdsource") %>%
dplyr::mutate(percentage = round(n() / nrow(.), 2)) %>%
dplyr::distinct(classification, percentage) %>%
dplyr::mutate(date = "001") %>%
tidyr::pivot_wider(
id_cols = data,
names_from = classification,
values_from = percentage
)
# create wide data frame, each dataset is a row, followed by percentage of each
# classification tag.
create_tidy_row <- function(df) {
tidy.row <- df %>%
dplyr::anti_join(tidycode::get_stopfuncs()) %>%
dplyr::inner_join(tidycode::get_classifications(include_duplicates = FALSE)) %>%
dplyr::select(c(func, lexicon, classification)) %>%
dplyr::filter(lexicon == "crowdsource") %>%
dplyr::mutate(percentage = round(n() / nrow(.), 2)) %>%
dplyr::distinct(classification, percentage) %>%
dplyr::mutate(date = "001") %>%
tidyr::pivot_wider(
id_cols = data,
names_from = classification,
values_from = percentage
)
tidy.row
}
df <- create_tidy_row(functions)
functions%>%
dplyr::anti_join(tidycode::get_stopfuncs()) %>%
dplyr::inner_join(tidycode::get_classifications(include_duplicates = FALSE)) %>%
dplyr::select(c(func, lexicon, classification)) %>%
dplyr::filter(lexicon == "crowdsource") %>%
dplyr::mutate(percentage = round(n() / nrow(.), 2)) %>%
dplyr::distinct(classification, percentage) %>%
dplyr::mutate(date = "001") %>%
tidyr::pivot_wider(
id_cols = data,
names_from = classification,
values_from = percentage
)
functions%>%
dplyr::anti_join(tidycode::get_stopfuncs()) %>%
dplyr::inner_join(tidycode::get_classifications(include_duplicates = FALSE))
functions%>%
dplyr::anti_join(tidycode::get_stopfuncs()) %>%
dplyr::inner_join(tidycode::get_classifications(include_duplicates = FALSE)) %>%
dplyr::select(c(func, lexicon, classification))
View(functions%>%
dplyr::anti_join(tidycode::get_stopfuncs()) %>%
dplyr::inner_join(tidycode::get_classifications(include_duplicates = FALSE)) %>%
dplyr::select(c(func, lexicon, classification)))
functions%>%
dplyr::anti_join(tidycode::get_stopfuncs()) %>%
dplyr::inner_join(tidycode::get_classifications(include_duplicates = FALSE)) %>%
dplyr::select(c(func, lexicon, classification)) %>%
dplyr::filter(lexicon == "crowdsource")
functions%>%
dplyr::anti_join(tidycode::get_stopfuncs()) %>%
dplyr::inner_join(tidycode::get_classifications(include_duplicates = FALSE)) %>%
dplyr::select(c(func, lexicon, classification)) %>%
dplyr::filter(lexicon == "crowdsource") %>%
dplyr::mutate(percentage = round(n() / nrow(.), 2))
functions%>%
dplyr::anti_join(tidycode::get_stopfuncs()) %>%
dplyr::inner_join(tidycode::get_classifications(include_duplicates = FALSE)) %>%
dplyr::select(c(func, lexicon, classification)) %>%
dplyr::filter(lexicon == "crowdsource") %>%
dplyr::mutate(percentage = round(n() / nrow(.), 2)) %>%
dplyr::distinct(classification, percentage)
functions%>%
dplyr::anti_join(tidycode::get_stopfuncs()) %>%
dplyr::inner_join(tidycode::get_classifications(include_duplicates = FALSE)) %>%
dplyr::select(c(func, lexicon, classification)) %>%
dplyr::filter(lexicon == "crowdsource") %>%
dplyr::mutate(percentage = round(n() / nrow(.), 2)) %>%
dplyr::distinct(classification, percentage) %>%
dplyr::mutate(data = "001") %>%
tidyr::pivot_wider(
id_cols = data,
names_from = classification,
values_from = percentage
)
functions%>%
dplyr::anti_join(tidycode::get_stopfuncs()) %>%
dplyr::inner_join(tidycode::get_classifications(include_duplicates = FALSE)) %>%
dplyr::select(c(func, lexicon, classification)) %>%
dplyr::filter(lexicon == "crowdsource") %>%
dplyr::group_by(classification) %>%
dplyr::mutate(percentage = round(n() / nrow(.), 2)) %>%
dplyr::distinct(classification, percentage) %>%
dplyr::mutate(data = "001") %>%
tidyr::pivot_wider(
id_cols = data,
names_from = classification,
values_from = percentage
)
functions%>%
dplyr::anti_join(tidycode::get_stopfuncs()) %>%
dplyr::inner_join(tidycode::get_classifications(include_duplicates = FALSE)) %>%
dplyr::select(c(func, lexicon, classification)) %>%
dplyr::filter(lexicon == "crowdsource") %>%
dplyr::group_by(classification) %>%
dplyr::mutate(percentage = round(n() / nrow(.), 2)) %>%
dplyr::distinct(classification, percentage) %>%
dplyr::mutate(data = "001") %>%
tidyr::pivot_wider(
id_cols = data,
names_from = classification,
values_from = percentage
) %>%
janitor::clean_names()
tidy.row
# create wide data frame, each dataset is a row, followed by percentage of each
# classification tag.
create_tidy_row <- function(df) {
tidy.row <- df %>%
dplyr::anti_join(tidycode::get_stopfuncs()) %>%
dplyr::inner_join(tidycode::get_classifications(include_duplicates = FALSE)) %>%
dplyr::select(c(func, lexicon, classification)) %>%
dplyr::filter(lexicon == "crowdsource") %>%
dplyr::group_by(classification) %>%
dplyr::mutate(percentage = round(n() / nrow(.), 2)) %>%
dplyr::distinct(classification, percentage) %>%
dplyr::mutate(data = "001") %>%
tidyr::pivot_wider(
id_cols = data,
names_from = classification,
values_from = percentage
) %>%
janitor::clean_names()
tidy.row
}
df <- create_tidy_row(functions)
df
c(1, 2, 3)[-1]
df <- create_tidy_row(functions, "team-1.R")
# create wide data frame, each dataset is a row, followed by percentage of each
# classification tag.
create_tidy_row <- function(df, file_name) {
tidy.row <- df %>%
dplyr::anti_join(tidycode::get_stopfuncs()) %>%
dplyr::inner_join(tidycode::get_classifications(include_duplicates = FALSE)) %>%
dplyr::select(c(func, lexicon, classification)) %>%
dplyr::filter(lexicon == "crowdsource") %>%
dplyr::group_by(classification) %>%
dplyr::mutate(percentage = round(n() / nrow(.), 2)) %>%
dplyr::distinct(classification, percentage) %>%
dplyr::mutate(data = file_name) %>%
tidyr::pivot_wider(
id_cols = data,
names_from = classification,
values_from = percentage
) %>%
janitor::clean_names()
tidy.row
}
df <- create_tidy_row(functions, "team-1.R")
df2 <- create_tidy_row(functions, "team-1.R")
rbind(df, df2)
a = rbind(df, df2)
a
?unnest_calls
rm(ls)
rm(test.df)
library(tidycode)
library(matahari)
library(tidyverse)
# create wide data frame, each dataset is a row, followed by percentage of each
# classification tag.
setup_df <- function(dir.name, file.name){
path <- paste(dir.name, file.name, sep = "/")
df <- tidycode::read_rfiles(path)
classified.df <- tidycode::unnest_calls(df, expr)
classified.df
}
classification_percentage <- function(file.name) {
df <- setup_df(file.path("Data"), file.name)
tidy.row <- df %>%
dplyr::anti_join(tidycode::get_stopfuncs()) %>%
dplyr::inner_join(tidycode::get_classifications(include_duplicates = FALSE)) %>%
dplyr::select(c(func, lexicon, classification)) %>%
dplyr::filter(lexicon == "crowdsource") %>%
dplyr::group_by(classification) %>%
dplyr::mutate(percentage = round(n() / nrow(.), 2)) %>%
dplyr::distinct(classification, percentage) %>%
dplyr::mutate(data = file.name) %>%
tidyr::pivot_wider(
id_cols = data,
names_from = classification,
values_from = percentage
) %>%
janitor::clean_names()
tidy.row
}
CREATE_DATAFRAME <- function() {
file.names <- list.files(
path = "./Data",
pattern = "*.R"
)
read.in.df <- lapply(files, function(x) {
classification_percentage(x)
})
data.table::rbindlist(read.in.df, fill = TRUE)
}
tes <- CREATE_DATAFRAME()
CREATE_DATAFRAME <- function() {
file.names <- list.files(
path = "./Data",
pattern = "*.R"
)
read.in.df <- lapply(file.names, function(x) {
classification_percentage(x)
})
data.table::rbindlist(read.in.df, fill = TRUE)
}
tes <- CREATE_DATAFRAME()
View(tes)
